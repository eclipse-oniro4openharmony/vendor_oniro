diff --git a/services/init/init_common_service.c b/services/init/init_common_service.c
index 5fc05b60..f60af986 100644
--- a/services/init/init_common_service.c
+++ b/services/init/init_common_service.c
@@ -876,7 +876,8 @@ void ServiceReap(Service *service)
             service->pid = tmp;
             ServiceReapHookExecute(service);
             service->pid = -1;
-            ExecReboot("panic");
+            //ExecReboot("panic");
+            INIT_LOGE("panic...");
         }
     } else if (!(service->attribute & SERVICE_ATTR_NEED_RESTART)) {
         if (!CalculateCrashTime(service, service->crashTime, service->crashCount)) {
diff --git a/services/init/standard/BUILD.gn b/services/init/standard/BUILD.gn
index 920c762c..7bd034a6 100644
--- a/services/init/standard/BUILD.gn
+++ b/services/init/standard/BUILD.gn
@@ -52,6 +52,7 @@ ohos_executable("init_early") {
     "//base/startup/init/interfaces/innerkits/fs_manager:libfsmanager_static",
     "//base/startup/init/services/log:init_log",
     "//base/startup/init/ueventd:libueventd_ramdisk_static",
+    "//third_party/e2fsprogs:libext2_blkid_static"
   ]
   if (init_extra_static_modules != "") {
     deps += [ init_extra_static_modules ]
@@ -117,6 +118,7 @@ ohos_executable("init") {
     "//base/startup/init/services/param/linux:param_init",
     "//base/startup/init/services/sandbox:sandbox",
     "//base/startup/init/services/utils:libinit_utils",
+    "//third_party/e2fsprogs:libext2_blkid_static"
   ]
   deps += [ "//base/startup/init/services/param/base:param_base" ]
   external_deps = [
diff --git a/services/init/standard/device.c b/services/init/standard/device.c
index e01ce5dc..d3b0bec9 100644
--- a/services/init/standard/device.c
+++ b/services/init/standard/device.c
@@ -17,10 +17,13 @@
 #include <unistd.h>
 #include <errno.h>
 #include <fcntl.h>
+#include <sys/dir.h>
 #include <sys/mount.h>
 #include <sys/stat.h>
 #include <sys/sysmacros.h>
 
+#include <blkid/blkid.h>
+
 #include <linux/major.h>
 #include "init_log.h"
 
@@ -75,6 +78,118 @@ static void MountBasicFs(void)
     }
 }
 
+static void CreateBlockDeviceNodeLink(const char *path)
+{
+    blkid_cache cache;
+    if (blkid_get_cache(&cache, NULL) < 0) {
+        INIT_LOGW("blkid_get_cache failed.");
+        return;
+    }
+    blkid_dev dev = blkid_get_dev(cache, path, BLKID_DEV_NORMAL);
+    if (!dev) {
+        INIT_LOGW("blkid_get_dev failed. %s", path);
+        return;
+    }
+
+    blkid_tag_iterate iter = blkid_tag_iterate_begin(dev);
+    const char *type, *value;
+    INIT_LOGI("blkid %s:", path);
+    while (blkid_tag_next(iter, &type, &value) == 0) {
+        INIT_LOGI("\t%s = %s", type, value);
+        if (strcmp(type, "UUID") != 0)
+            continue;
+        char link_path[256];
+        snprintf(link_path, sizeof(link_path), "/dev/block/by-uuid/%s", value);
+        if (symlink(path, link_path) == 0)
+            INIT_LOGI("symlink %s to %s successed.", path, link_path);
+        else 
+            INIT_LOGW("symlink %s to %s failed.", path, link_path);
+        break;
+    }
+    blkid_tag_iterate_end(iter);
+
+    blkid_put_cache(cache);
+}
+
+static void CreateBlockDeviceNode(const char *name, dev_t dev) {
+    char path[256];
+    snprintf(path, sizeof(path), "%s/%s", "/dev/block/", name);
+    if (mknod(path, S_IFBLK | DEFAULT_RW_MODE, dev) < 0 && errno != EEXIST) {
+        INIT_LOGE("Create %s device node failed. %s", path, strerror(errno));
+    } else {
+        INIT_LOGI("Create %s device node successed.", path);
+        CreateBlockDeviceNodeLink(path);
+    }
+}
+
+static void ScanBlockDevices() {
+    DIR *dir;
+    struct dirent *ent;
+
+    dir = opendir("/sys/block");
+    if (!dir) {
+        INIT_LOGE("opendir %s failed.", "/sys/block");
+        return;
+    }
+
+    if (mkdir("/dev/block", S_IRWXU | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH) != 0) {
+        INIT_LOGW("mkdir /dev/block failed. %s", strerror(errno));
+    }
+
+    if (mkdir("/dev/block/by-uuid", S_IRWXU | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH) != 0) {
+        INIT_LOGW("mkdir /dev/block/by-uuid failed. %s", strerror(errno));
+    }
+
+    while ((ent = readdir(dir)) != NULL) {
+        if (ent->d_name[0] == '.') 
+            continue;
+
+        char device_path[256];
+        snprintf(device_path, sizeof(device_path), "%s/%s", "/sys/block", ent->d_name);
+
+        char dev_file[256];
+        snprintf(dev_file, sizeof(dev_file), "%s/dev", device_path);
+
+        FILE *fp = fopen(dev_file, "r");
+        if (fp) {
+            unsigned int major, minor;
+            if (fscanf(fp, "%u:%u", &major, &minor) == 2) {
+                dev_t dev = makedev(major, minor);
+                CreateBlockDeviceNode(ent->d_name, dev);
+
+                DIR *device_dir;
+                struct dirent *part_ent;
+                device_dir = opendir(device_path);
+                if (device_dir) {
+                    while ((part_ent = readdir(device_dir)) != NULL) {
+                        if (part_ent->d_type != DT_DIR || part_ent->d_name[0] == '.')
+                            continue;
+                
+                        if (strstr(part_ent->d_name, ent->d_name) != part_ent->d_name)
+                            continue;
+                
+                        char part_dev_file[256];
+                        snprintf(part_dev_file, sizeof(part_dev_file), "%s/%s/dev", device_path, part_ent->d_name);
+                
+                        FILE *part_fp = fopen(part_dev_file, "r");
+                        if (part_fp) {
+                            unsigned int part_major, part_minor;
+                            if (fscanf(part_fp, "%u:%u", &part_major, &part_minor) == 2) {
+                                dev_t part_dev = makedev(part_major, part_minor);
+                                CreateBlockDeviceNode(part_ent->d_name, part_dev);
+                            }
+                            fclose(part_fp);
+                        }
+                    }
+                    closedir(device_dir);
+                }
+            }
+            fclose(fp);
+        }
+    }
+    closedir(dir);
+}
+
 static void CreateDeviceNode(void)
 {
     if (access("/dev/null", F_OK) != 0) {
@@ -94,6 +209,8 @@ static void CreateDeviceNode(void)
             INIT_LOGW("Create /dev/urandom device node failed. %s", strerror(errno));
         }
     }
+
+    ScanBlockDevices();
 }
 
 static void EnableDevKmsg(void)
diff --git a/services/init/standard/init_firststage.c b/services/init/standard/init_firststage.c
index 4f285a82..417d786e 100755
--- a/services/init/standard/init_firststage.c
+++ b/services/init/standard/init_firststage.c
@@ -99,6 +99,7 @@ static void MountRequiredPartitions(void)
     Fstab *fstab = LoadRequiredFstab();
     char **devices = (fstab != NULL) ? GetRequiredDevices(*fstab, &requiredNum) : NULL;
     if (devices != NULL && requiredNum > 0) {
+        sleep(5);
         int ret = StartUeventd(devices, requiredNum);
         if (ret == 0) {
             ret = MountRequriedPartitions(fstab);
diff --git a/services/sandbox/system-sandbox64.json b/services/sandbox/system-sandbox64.json
index 6bb3bf2e..317dc483 100644
--- a/services/sandbox/system-sandbox64.json
+++ b/services/sandbox/system-sandbox64.json
@@ -83,6 +83,10 @@
             "src-path" : "/vendor",
             "sandbox-path" : "/chipset",
             "sandbox-flags" : [ "bind", "rec", "private" ]
+        }, {
+            "src-path" : "/vendor",
+            "sandbox-path" : "/vendor",
+            "sandbox-flags" : [ "bind", "rec", "private" ]
         }, {
             "src-path" : "/chip_prod",
             "sandbox-path" : "/chip_prod",
